
fn process_trace(config: &Config, mapper: &Mapper){
    if config.use_trace_plugin {

        if (config.trace_type == "mem" || config.trace_type == "memory" ){

            let _reader = MemoryTraceReaderPlugin
            ::new(&config.trace_plugin_path, &config.trace_path)
                .expect("Failed to create memory trace reader. Make sure the trace_file_path and the location of plugin specified in path is correct.");

            process_mem_traces_plugin(_reader, &mapper);

        }else{
            let _reader = CPUTraceReaderPlugin
            ::new(&config.trace_plugin_path, &config.trace_path)
                .expect("Failed to create memory trace reader");

            process_cpu_traces_plugin(_reader, &mapper);

        }


    }else {

        let mut reader = MemoryTraceReader
        ::new(&config.trace_path)
            .expect("error initializing a memory trace reader");

        process_default_traces(reader, mapper);

    }

}
fn process_mem_traces_plugin(mut reader: MemoryTraceReaderPlugin, mapper: &Mapper){
    loop {
        match reader.next_trace(mapper) {
            Some(trace) => {
                println!("{:?}", trace);
                // Process the trace...
            }
            None => break,
        }
    }

    reader.destroy();
}
fn process_cpu_traces_plugin(mut reader: CPUTraceReaderPlugin, mapper: &Mapper){
    loop {
        match reader.next_trace(&mapper) {
            Some(trace) => {
                println!("{:?}", trace);
                // Process the trace...
            }
            None => break,
        }
    }

    reader.destroy();
}
fn process_default_traces<R, M>(mut reader: R, mapper: &M)
    where
        R: TraceReader,
        M: IAddressMapping,
{
    while let Some(trace) = reader.next_trace(mapper) {
        println!("{:?}", trace);
    }

}